<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.snow.storeapi.mapper.GoodsMapper">
    <resultMap id="BaseResultMap" type="com.snow.storeapi.DTO.goods.GoodsStockDTO">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="sku" jdbcType="VARCHAR" property="sku" />
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="size_group" jdbcType="INTEGER" property="sizeGroup" />
        <result column="img_url" jdbcType="VARCHAR" property="imgUrl" />
        <result column="sale_price" jdbcType="DECIMAL" property="salePrice" />
        <result column="cost_price" jdbcType="DECIMAL" property="costPrice" />
        <result column="pre_sku" jdbcType="VARCHAR" property="preSku" />
        <result column="color" jdbcType="VARCHAR" property="color" />
        <result column="size" jdbcType="VARCHAR" property="size" />
        <result column="current_stock" jdbcType="INTEGER" property="currentStock" />
    </resultMap>
    <select id="findByDept" resultMap="BaseResultMap">
        SELECT
        g.id, sku, name, size_group, img_url, sale_price, cost_price, pre_sku, g.update_time,
        s.color, s.size, s.current_stock
        FROM
             (
                 select * from goods
                 where deleted = 0
                <trim>
                    <if test="name != null">
                        AND name LIKE CONCAT
                        (CONCAT('%', #{name, jdbcType=VARCHAR}), '%')
                    </if>
                    <if test="preSku != null">
                        AND pre_sku LIKE CONCAT(CONCAT('%', #{preSku, jdbcType=VARCHAR}), '%')
                    </if>
                </trim>
                ORDER BY
                <choose>
                    <when test="sort != null">
                        #{sort}
                    </when>
                    <otherwise>
                        update_time desc
                    </otherwise>
                </choose>

                limit #{offset, jdbcType=INTEGER}, #{limit, jdbcType=INTEGER}
            ) g
        LEFT JOIN (select * from stock) s ON g.id = s.goods_id and s.dept_id = #{deptId, jdbcType=INTEGER}
        WHERE
        s.deleted = 0
    </select>
    <select id="count" resultType="int">
--         SELECT FOUND_ROWS() AS total;
        select count(1) from goods where deleted = 0
    </select>
</mapper>